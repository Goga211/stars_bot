# main.py  ‚Äî aiogram3 + aiosend (Crypto Pay)
import os
from re import S
import time
from typing import Optional

from aiosend.types import balance
import user_context
from dotenv import load_dotenv
import fragment_api
import aiohttp
from aiogram import Bot, Dispatcher, Router, F, session
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiosend import CryptoPay
import logging

load_dotenv()

# ===== ENV =====
TOKEN = os.getenv("TOKEN")

CRYPTOPAY_TOKEN = os.getenv("CRYPTO_API")


CRYPTO_ASSET = os.getenv("CRYPTO_ASSET", "USDT")          # 'USDT' | 'TON' | ...
PRICE_PER_STAR_USD = float(os.getenv("PRICE_PER_STAR_USD", "0.02"))  # 50‚≠ê = $1 ‚Üí 1‚≠ê = $0.02
RATE_UPDATE_SECONDS = int(os.getenv("RATE_UPDATE_SECONDS", "3600"))

# ===== BOT / SDK =====
bot = Bot(TOKEN)
dp = Dispatcher()
router = Router()
cp = CryptoPay(CRYPTOPAY_TOKEN)

AMOUNTS = [50, 100, 200, 500, 1000]

# ===== –ö—ç—à –∫—É—Ä—Å–∞ –¶–ë =====
_usd_rate: Optional[float] = None
_last_rate_ts: Optional[float] = None

# ===== –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–≤–æ–π—Å—ã =====
_active_invoices: dict = {}  # {invoice_id: {"user_id": int, "stars": int, "status": str}}

# ===== FSM –¥–ª—è –≤–≤–æ–¥–∞ —Å–≤–æ–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ =====
class BuyForm(StatesGroup):
    waiting_amount = State()

# ===== –•–µ–ª–ø–µ—Ä—ã UI =====
def create_wide_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[])

def create_back_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="back_to_menu")]
    ])

def create_payment_keyboard(amount: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π", callback_data=f"pay_card:{amount}"),
            InlineKeyboardButton(text="‚Çø –û–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–π", callback_data=f"pay_crypto:{amount}"),
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="back_to_menu")]
    ])

async def stars_menu() -> InlineKeyboardMarkup:
    rows = []
    async with aiohttp.ClientSession() as session:
        for amount in AMOUNTS:
            price_rub = await calculate_price_rub(session, amount)
            rows.append([InlineKeyboardButton(
                text=f"–ö—É–ø–∏—Ç—å {amount} ‚≠ê - {price_rub} ‚ÇΩ",
                callback_data=f"buy:{amount}"
            )])
    rows.append([InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ—ë –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="custom_amount")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

# ===== –ö—É—Ä—Å –∏ —Ü–µ–Ω—ã =====
async def get_usd_rate(session: aiohttp.ClientSession) -> float:
    global _usd_rate, _last_rate_ts
    now = time.time()
    if _usd_rate and _last_rate_ts and (now - _last_rate_ts) < RATE_UPDATE_SECONDS:
        return _usd_rate
    
    try:
        async with session.get("https://www.cbr-xml-daily.ru/daily_json.js", timeout=10) as resp:
            if resp.status != 200:
                return _usd_rate or 95.0
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ (JavaScript —Ñ–æ—Ä–º–∞—Ç)
            text = await resp.text()
            
            # –ü–∞—Ä—Å–∏–º JavaScript –∫–∞–∫ JSON (—É–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
            import json
            import re
            
            # –£–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
            clean_text = re.sub(r'//.*?\n', '\n', text)
            clean_text = re.sub(r'/\*.*?\*/', '', clean_text, flags=re.DOTALL)
            
            try:
                data = json.loads(clean_text)
            except json.JSONDecodeError:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ JSON –≤ —Ç–µ–∫—Å—Ç–µ
                json_match = re.search(r'\{.*\}', clean_text, re.DOTALL)
                if json_match:
                    data = json.loads(json_match.group())
                else:
                    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ")
            
            if "Valute" not in data or "USD" not in data["Valute"]:
                return _usd_rate or 95.0
                
            _usd_rate = float(data["Valute"]["USD"]["Value"])
            _last_rate_ts = now
            return _usd_rate
            
    except Exception as e:
        return _usd_rate or 95.0

async def calculate_price_rub(session: aiohttp.ClientSession, stars_amount: int) -> float:
    usd_price = stars_amount * PRICE_PER_STAR_USD
    rub_price = usd_price * await get_usd_rate(session)
    return round(rub_price, 2)

import aiohttp

async def ton_price_binance(session: aiohttp.ClientSession | None = None, timeout: float = 5.0) -> float:
    url = "https://api.binance.com/api/v3/ticker/price"
    params = {"symbol": "TONUSDT"}

    own = session is None
    s = session or aiohttp.ClientSession()
    try:
        async with s.get(url, params=params, timeout=timeout) as resp:
            resp.raise_for_status()
            data = await resp.json()
            return float(data["price"])
    finally:
        if own:
            await s.close()


# ===== Crypto Pay (—Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞) =====
async def create_crypto_invoice(stars: int, tg_user_id: int) -> str:
    """–°–æ–∑–¥–∞—ë–º –∏–Ω–≤–æ–π—Å –≤ Crypto Pay –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É."""
    global _active_invoices
    
    usd_amount = round(stars * PRICE_PER_STAR_USD, 2)
    #usd_amount = 0.01

    # payload –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –∞ –Ω–µ —Å–ª–æ–≤–∞—Ä–µ–º
    import json
    payload_str = json.dumps({
        "tg_user_id": str(tg_user_id), 
        "stars": int(stars)
    })
    
    invoice = await cp.create_invoice(
        amount=usd_amount,
        asset=CRYPTO_ASSET,
        description=f"Telegram Stars x{stars}",
        payload=payload_str,
        expires_in=3600
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –∏–Ω–≤–æ–π—Å–µ
    invoice_id = invoice.invoice_id
    _active_invoices[invoice_id] = {
        "user_id": tg_user_id,
        "stars": stars,
        "status": "pending"
    }
    
    return getattr(invoice, "mini_app_invoice_url", None) or getattr(invoice, "pay_url", "")

# ===== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–æ–≤ =====
async def check_invoice_status(invoice_id: str) -> str:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞"""
    try:
        invoice = await cp.get_invoice(invoice_id)
        return invoice.status
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–∞ {invoice_id}: {e}")
        return "unknown"

# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π =====
async def check_payments():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–æ–≤ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ"""
    global _active_invoices
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–≤–æ–π—Å—ã
        for invoice_id, invoice_data in list(_active_invoices.items()):
            if invoice_data["status"] == "pending":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞
                current_status = await check_invoice_status(invoice_id)
                
                if current_status == "paid":
                    # –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
                    await process_paid_invoice(invoice_id, invoice_data)
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    _active_invoices[invoice_id]["status"] = "processed"
                    
                elif current_status in ["expired", "cancelled"]:
                    # –ò–Ω–≤–æ–π—Å –∏—Å—Ç–µ–∫ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω - —É–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                    del _active_invoices[invoice_id]
                    logging.info(f"–£–¥–∞–ª–µ–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω–≤–æ–π—Å: {invoice_id} (—Å—Ç–∞—Ç—É—Å: {current_status})")
                
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")

async def process_paid_invoice(invoice_id: str, invoice_data: dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂"""
    try:
        tg_user_id = invoice_data["user_id"]
        stars = invoice_data["stars"]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–≤–æ–π—Å–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—É–º–º—ã
        try:
            invoice = await cp.get_invoice(invoice_id)
            amount = invoice.amount
            asset = invoice.asset
        except:
            amount = "0.01"  # Fallback –∑–Ω–∞—á–µ–Ω–∏–µ
            asset = CRYPTO_ASSET

        await bot.send_message(
            tg_user_id,
            f"üí´ –ü–ª–∞—Ç—ë–∂ –ø–æ–ª—É—á–µ–Ω!\n\n"
            f"üì¶ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ {stars} ‚≠ê...\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ ‚è≥"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await send_stars_to_user(tg_user_id, stars, invoice_id, amount, asset)
        
        # –ü–æ–º–µ—á–∞–µ–º –∏–Ω–≤–æ–π—Å –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
        logging.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω –ø–ª–∞—Ç–µ–∂: {invoice_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_user_id}, {stars} –∑–≤–µ–∑–¥")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ {invoice_id}: {e}")

async def send_stars_to_user(tg_user_id: int, stars: int, invoice_id: str, amount: str = None, asset: str = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram Stars API"""

    try:
        u = user_context.get_user(tg_user_id) or {}
        username = (u.get("username") or str(tg_user_id)).lstrip("@")

        resp = await fragment_api.buy_stars(username, stars)

        success_message = (
            f"üéâ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n"
            f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ: {stars} ‚≠ê\n"
            f"üí∞ –°—É–º–º–∞: {amount or 'N/A'} {asset or CRYPTO_ASSET}\n"
            f"üÜî ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {invoice_id}\n\n"
            f"‚úÖ –ó–≤–µ–∑–¥—ã –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç!"
        )
        
        await bot.send_message(tg_user_id, success_message)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_user_id}: {e}")
        
        error_message = (
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ –∑–≤–µ–∑–¥\n\n"
            f"üì¶ –ó–∞–∫–∞–∑–∞–Ω–æ: {stars} ‚≠ê\n"
            f"üÜî ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {invoice_id}\n\n"
            f"üîß –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"
        )
        
        try:
            await bot.send_message(tg_user_id, error_message)
        except:
            pass

# ===== Handlers =====
@router.message(Command("start"))
async def cmd_start(message: Message):
    kb = await stars_menu()
    user_context.get_user_ref(message)
    await message.answer(
        f"üöÄ –ü—Ä–∏–≤–µ—Ç!\n\n"
        "–•–æ—á–µ—à—å –∫—É–ø–∏—Ç—å Telegram Stars?\n"
        "–Ø –ø–æ–º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —à–∞–≥–æ–≤ üí´\n\n"
        "üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ –∫—Ä–∏–ø—Ç–µ –∏–ª–∏ –∫–∞—Ä—Ç–æ–π\n"
        "‚ö° –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–≤—ë–∑–¥\n"
        "üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –Ω–∞–ø—Ä—è–º—É—é –≤ Telegram\n\n"
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–∞–∫–µ—Ç –Ω–∏–∂–µ üëá",
        reply_markup=kb
    )

@router.callback_query(F.data == "back_to_menu")
async def cb_back(call: CallbackQuery, state: FSMContext):
    await state.clear()
    kb = await stars_menu()
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∑–≤—ë–∑–¥ üëá", reply_markup=kb)
    await call.answer()

@router.callback_query(F.data.startswith("buy:"))
async def cb_buy(call: CallbackQuery):
    amount = int(call.data.split(":")[1])
    async with aiohttp.ClientSession() as session:
        price_rub = await calculate_price_rub(session, amount)
    await call.message.edit_text(
        f"üõí –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∞–∫–µ—Ç {amount} ‚≠ê\n\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price_rub} ‚ÇΩ\n\n"
        f"üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=create_payment_keyboard(amount)
    )
    await call.answer()

@router.callback_query(F.data == "custom_amount")
async def cb_custom_amount(call: CallbackQuery, state: FSMContext):
    await state.set_state(BuyForm.waiting_amount)
    await call.message.edit_text(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:\n\n"
        "üí° –ú–∏–Ω–∏–º—É–º: 50\n"
        "üí° –ú–∞–∫—Å–∏–º—É–º: 10000\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ:",
        reply_markup=create_back_keyboard()
    )
    await call.answer()

@router.message(BuyForm.waiting_amount)
async def take_custom_amount(message: Message, state: FSMContext):
    try:
        amount = int(message.text.strip())
        if not (50 <= amount <= 10000):
            raise ValueError
    except Exception:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 50 –¥–æ 10000.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑: /start")
        await state.clear()
        return

    async with aiohttp.ClientSession() as session:
        price_rub = await calculate_price_rub(session, amount)

    await message.answer(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {amount} ‚≠ê\n\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price_rub} ‚ÇΩ\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=create_payment_keyboard(amount)
    )
    await state.clear()

@router.callback_query(F.data.startswith("pay_card:"))
async def cb_pay_card(call: CallbackQuery):
    amount = int(call.data.split(":")[1])
    async with aiohttp.ClientSession() as session:
        price_rub = await calculate_price_rub(session, amount)

    await call.message.edit_text(
        f"üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π\n\n"
        f"üì¶ –ü–∞–∫–µ—Ç: {amount} ‚≠ê\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price_rub} ‚ÇΩ\n\n"
        f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –∑–¥–µ—Å—å\n"
        f"‚ö° –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–≤—ë–∑–¥—ã –ø–æ—Å—Ç—É–ø—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
        reply_markup=create_back_keyboard()
    )
    await call.answer()

import aiohttp

async def ton_price_binance(session: aiohttp.ClientSession, timeout: float = 5.0) -> float:
    async with session.get(
        "https://api.binance.com/api/v3/ticker/price",
        params={"symbol": "TONUSDT"},
        timeout=timeout,
    ) as resp:
        resp.raise_for_status()
        data = await resp.json()
        return float(data["price"])

@router.callback_query(F.data.startswith("pay_crypto:"))
async def cb_pay_crypto(call: CallbackQuery):
    amount = int(call.data.split(":")[1])

    try:
        async with aiohttp.ClientSession() as session:
            ton_usdt = await ton_price_binance(session)

        wallet_raw = await fragment_api.get_balance()
        wallet_ton = float(wallet_raw)

        price_per_star = 0.75 / 50

        allow_stars = int(wallet_ton * ton_usdt / price_per_star)
        
        if amount > allow_stars:
            text = (
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ.\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ –∫ –ø–æ–∫—É–ø–∫–µ —Å–µ–π—á–∞—Å: {round(allow_stars, 0)} ‚≠ê"
            )
            await call.message.edit_text(text, reply_markup=create_back_keyboard())
            await call.answer()
            return

        pay_url = await create_crypto_invoice(amount, call.from_user.id)

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –≤ CryptoBot", url=pay_url)],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="back_to_menu")]
        ])
        await call.message.edit_text(
            f"‚Çø –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π\n\n"
            f"üì¶ –ü–∞–∫–µ—Ç: {amount} ‚≠ê\n"
            f"üëâ –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–µ—Ç–∏ –∑–≤—ë–∑–¥—ã –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã.",
            reply_markup=kb
        )
        await call.answer()

    except Exception as e:
        await call.message.edit_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫—Ä–∏–ø—Ç–æ-—Å—á—ë—Ç: {e}",
            reply_markup=create_back_keyboard()
        )
        await call.answer()

# ===== –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã =====
@router.message(Command("check_payments"))
async def cmd_check_payments(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if 683135069 != message.from_user.id:
        return message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
    await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–ª–∞—Ç–µ–∂–∏...")
    await check_payments()
    await message.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

@router.message(Command("clear_active"))
async def cmd_clear_active(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if 683135069 != message.from_user.id:
        return message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")

    global _active_invoices
    count = len(_active_invoices)
    _active_invoices.clear()
    await message.answer(f"üßπ –û—á–∏—â–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–≤–æ–π—Å—ã ({count} –∑–∞–ø–∏—Å–µ–π)")

@router.message(Command("stats"))
async def cmd_stats(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if 683135069 != message.from_user.id:
        return message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
    global _active_invoices
    pending_count = sum(1 for inv in _active_invoices.values() if inv["status"] == "pending")
    processed_count = sum(1 for inv in _active_invoices.values() if inv["status"] == "processed")
    
    await message.answer(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                        f"‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {pending_count}\n"
                        f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {processed_count}\n"
                        f"üìã –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–æ–≤: {len(_active_invoices)}\n"
                        f"üí± –ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞: {_usd_rate or '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω'} ‚ÇΩ")

# ===== –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ =====
async def periodic_payment_check():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥"""
    while True:
        try:
            await check_payments()
            await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            await asyncio.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –º–∏–Ω—É—Ç—É

# ===== entry point =====
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞ –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
    dp.include_router(router)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–µ–π –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(periodic_payment_check())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
